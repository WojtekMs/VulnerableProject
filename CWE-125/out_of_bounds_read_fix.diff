diff --git a/CWE-125/networking-src/CMakeLists.txt b/CWE-125/networking-src/CMakeLists.txt
index 23f8254..0b6fe0b 100644
--- a/CWE-125/networking-src/CMakeLists.txt
+++ b/CWE-125/networking-src/CMakeLists.txt
@@ -1,3 +1,3 @@
-add_library(networking-lib src/utils.cpp src/Server.cpp src/Client.cpp)
+add_library(networking-lib src/utils.cpp src/Server.cpp src/Client.cpp src/CharBuffer.cpp)
 
 target_include_directories(networking-lib PUBLIC ${CMAKE_CURRENT_SOURCE_DIR})
diff --git a/CWE-125/networking-src/src/utils.cpp b/CWE-125/networking-src/src/utils.cpp
index c6c16f0..643d423 100644
--- a/CWE-125/networking-src/src/utils.cpp
+++ b/CWE-125/networking-src/src/utils.cpp
@@ -1,20 +1,20 @@
 #include "networking/utils.hpp"
 
-#include "networking/config.hpp"
+#include "networking/CharBuffer.hpp"
 #include "networking/EndConnection.hpp"
+#include "networking/config.hpp"
 
 #include <cstring>
-#include <stdexcept>
-#include <sys/socket.h>
 #include <errno.h>
-
 #include <iostream>
 #include <sstream>
+#include <stdexcept>
+#include <sys/socket.h>
 
 namespace networking::utils
 {
 void send_str(const std::string& string, int socket_fd, int send_flags);
-std::string receive_str(int socket_fd, int message_size, int recv_flags);
+std::string receive_str(int socket_fd, unsigned int message_size, int recv_flags);
 
 void log_error(const std::string& error_msg) noexcept
 {
@@ -30,25 +30,26 @@ std::string receive_string(int socket_fd, int recv_flags)
     return message;
 }
 
-std::string receive_str(int socket_fd, int message_size, int recv_flags)
+std::string receive_str(int socket_fd, unsigned int message_size, int recv_flags)
 {
-    int buffer_size = 256;
-    char buffer[buffer_size];
-    int total_bytes_received{};
+    networking::CharBuffer buffer(message_size);
+    long int total_bytes_received{};
     std::string message{};
     while (total_bytes_received < message_size) {
-        std::memset(buffer, 0, buffer_size);
-        auto bytes_received =
-            recv(socket_fd, buffer, message_size - total_bytes_received, recv_flags);
+        buffer.clear();
+        auto bytes_received = recv(socket_fd,
+                                   buffer.getBuffer(),
+                                   message_size - total_bytes_received,
+                                   recv_flags);
         if (bytes_received == -1) {
             utils::log_error("ERROR on receiving data!");
         }
         if (bytes_received == 0) {
             shutdown(socket_fd, SHUT_RD);
-            throw networking::EndConnection("Connection was closed!");
+            throw networking::EndConnection("Connection closed!");
         }
         total_bytes_received += bytes_received;
-        message += std::string(buffer, buffer + strlen(buffer));
+        message += std::string(buffer.getBuffer());
     }
     return message;
 }
